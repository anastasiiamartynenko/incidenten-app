@inherits LayoutComponentBase
@inject AuthService AuthService;
@inject NavigationManager NavigationManager;
@inject AuthState AuthState;

@implements IDisposable

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary">
        @if (_isAuthenticated)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@ToggleDrawer"/>
        }
        <MudSpacer/>
        <MudText Typo="Typo.h6">Incidenten Web App</MudText>
        <MudIconButton 
            Icon="@Icons.Material.Filled.Add" 
            Color="Color.Inherit" 
            OnClick="@(() => NavigationManager.NavigateTo("/create-incident"))" />
        <MudMenu Icon="@Icons.Material.Filled.Person" AriaLabel="Open user menu">
            @if (_isAuthenticated)
            {
                <MudMenuItem Label="My account" OnClick="@(() => NavigationManager.NavigateTo("/user"))" />
                <MudMenuItem Label="Log out" OnClick="@LogOut" />
            }
            else
            {
                <MudMenuItem Label="Log in" OnClick="@(() => NavigationManager.NavigateTo("/log-in"))" />
                <MudMenuItem Label="Sign up" OnClick="@(() => NavigationManager.NavigateTo("/sign-up"))" />
            }
        </MudMenu>
    </MudAppBar>

    @if (_isAuthenticated)
    {
        <MudDrawer @bind-Open="@_open" ClipMode="DrawerClipMode.Always">
            <NavMenu />
        </MudDrawer>
    }

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _isAuthenticated;
    bool _open;

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        AuthState.OnChange += StateChanged;
    }

    private async void StateChanged()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        await InvokeAsync(StateHasChanged);
    }

    async Task LogOut()
    {
        await AuthService.RemoveTokenAsync();
        NavigationManager.NavigateTo("/log-in");
    }

    public void Dispose()
    {
        AuthState.OnChange -= StateChanged;
    }
}
